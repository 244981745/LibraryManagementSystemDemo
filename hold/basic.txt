第二节 三角函数
    1.正弦函数。正弦函数SIN(X)可以让计算机计算出X弧度的正弦值。如
10 A=63
20 PRINT SIN(A)
30 END 
运行
.16735571
    用SIN(X)只能返回弧度的正弦值，如果要返回角度的正弦值就要用
SIN(X)角=SIN(X弧*π/180)
    来转换。如要计算30角度的正弦值可以用下列程序计算：
10 A=30
20 B=A*3.14159/180
30 PRINT SIN(B)
40 END
运行
.5
    2.余弦函数，余弦函数COS(X)是用来计算X弧度的余弦的，它的用法和COS(X)大同小异，如
10 A=30
20 PRINT COS(A)
30 END
运行


    3.正切函数，不用说了，正切函数TAN(X)是求X弧度的正切用的，如：
10 A=34
20 PRINT TAN(A)
30 END
运行


    4.反正切函数。利用反正切函数ATN(X)可以求出X弧度的反正切值，也可以利用它求出X弧度的反正弦值和反余弦值，可以用以下公式转换：
反正弦：ATN(X/SQR(1-X*X))
反余弦：ATN(SQR(1-X*X)/X)
    由于本人对于三角函数的认识有限，故不能作太多的说明，还请大家在实际操作中摸索其中的奥妙。
 
第三节 其它函数
    1.取整函数。取整函数INT(X)可以求不大于X的最大整数。如：
10 A=3.2:B=4.63
20 X=INT(A+B)
30 PRINT "A+B=";A+B,"INT(A+B)=";X
40 C=-3.2:D=-4.63
50 Y=INT(C+D)
60 PRINT "C+D=";C+D,"INT(C+D)=";Y;
70 END
运行
A+B=7.83
INT(A+B)=7
C+D=-7.83
INT(C+D)=-8
    我们都知道A+B=7.83,而不大于7.83的最大整数是7；同理，C+D=-7.83,而不大于-7.83的最大整数是-8。从这个程序我们不难看出INT(X)在程序中作用。
    INT(X)还可以四舍五入地取整，如
10 A=10:B=3:C=6
20 P=INT(A/B+0.5)
30 Q=INT(A/C+0.5)
40 PRINT A;"÷";B;"≈";P,A;"÷";C;"≈";Q
50 END 
运行
10÷3≈3
10÷6≈2
    有时我们还需要四舍五入保留小数一位或两位，就要用到以下程序：
10 A=10:B=3:C=6
20 P=INT(A/B*100+0.5)/100
30 Q=INT(A/C*100+0.5)/100
40 PRINT A;"÷";B;"≈";P,A;"÷";C;"≈";Q
50 END
运行
10÷3≈3.33
10÷6≈1.67
    想一想，这里面为什么要加一个0.5？
    注：以上四舍五入的方法只适全正数。
    2.随机函数。随机函数RND(X)让电脑产生一组随机数来模拟自然界中的各种随机现象，如在银行中平均每分钟会有一到五个不等的人进入银行，而银行平均第分钟能处理三个人的业务，那么一小时后队伍长度会有多长呢？还有，我们向天上扔一个硬币，看硬币落下100次当中会有多少次是正面，有多少次是反面等。
    当随机函数RND(X)中的
X>0时，产生不同的随机数；
X=0时，产生上次的随机数；
X<0时，产生系列的随机数。
    产生的随机数一般是在0和1之间的数。如
10 FOR I=1 TO 4
20 LET A=RND(1)
30 PRINT A
40 END
运行
0.01252341
0.15198752
0.65234567
0.24026854
    利用随机数可以模拟很多自然界中的随机现象，如上面我们说到的抛硬币，现在我们就举个例子来说明吧！A表示正面，B表示反面：
10 FOR I=1 TO 90
20 IF RND(1)<0.5 THEN PRINT "A"; ELSE PRINT "B";
30 NEXT
40 END
运行
BBBAAABAAAAABABABBBAABBABBAABBBABAAAAABBAABABABBAAABBABAABBABAABABABBBBABABABBBABBABAAABAA
    我们来数一下吧，一共有46个A和44个B。让我们再做一个让程序自动计数的程序吧：
10 PRINT "A=","B="
20 FOR I=1 TO 200
30 IF RND(1)<0.5 THEN A=A+1:LOCATE 1,3:PRINT A ELSE B=B+1:LOCATE 2,3:PRINT B
40 NEXT
运行
A=99
B=101
    运行时A、B会不断的增加，直到程序运行完毕，显示出最后的结果。
    在很多时候，我们可以把取整函数和随机函数配合一起使用，这样可以模拟出很多电脑智能的程序。如：我们计算机充当一个教学员，让计算机随机出一些两位数的加、减、乘、除中的其中一种让用户回答答案，如果正确就加分，否则不加分，最后再把成绩统计到屏幕上：
10 FOR I=1 TO 10
20 A=INT(RND(1)*99):B=INT(RND(1)*99)
30 ON INT(RND(1)*4)+1 GOTO 100,200,300,400
100 REM 加
110 CLS:PRINT A;"+";B;"=";
120 INPUT C
130 IF C=A+B THEN PRINT "正确!":R=R+1:500
140 PRINT "错误!":GOTO 500
200 REM 减
210 CLS:PRINT A;"-";B;"=";
220 INPUT C
230 IF C=A-B THEN PRINT "正确!":R=R+1:500
240 PRINT "错误!":GOTO 500
300 REM 乘
310 CLS:PRINT A;"*";B;"=";
320 INPUT C
330 IF C=A*B THEN PRINT "正确!":R=R+1:500
340 PRINT "错误!":GOTO 500
400 REM 除
410 CLS:PRINT A*B;"+";B;"=";
420 INPUT C
430 IF C=A THEN PRINT "正确!":R=R+1:500
440 PRINT "错误!":GOTO 500
500 T$=INKEY$:NEXT
510 CLS:PRINT "你的成绩是:";R*10;分
520 END
运行
36+53=?89
正确!
25*24=?500
错误!
……
……
你的成绩是:80分
    具体随机函数还有些什么功能我还会在以后的教程中专门讲述。
    3.自定义函数。我们用BASIC编程时经党会遇到一个公式要多次使用到，如果这个公式比较简单还不要紧，要是像
A=2.3694*((X-5.2139)*(6.5796)-(6.5796^2-X^2)/2)
    这个那么复杂的话。那么要多次使用就必须多次输入，这样不但使程序复杂了，而且还很容易出错。所以，我们就可以用自定义函数轻松地解决这个问题。那么，什么是自定义函数呢？由用户自行定义的函数就叫自定光函数，它用DEF语句来把表达式定义成自定义函数，如上面的那个表达式可以定义成关于X的函数，写成：
DEF FN A(X)=2.3694*((X-5.2139)*(6.5796-X)-(6.5796^2-X^2)/2)
    这样，后面的程序如果要用到这个公式就可以直接用FN A(X)就可轻松地调用这个自定义函数了。
    自定义函数的使用规定有：
    ①DEF是自定义函数的定义符，它是英文define的缩写，当要定义一个自定义函数时，必须在自定义函数的前面加上DEF，否则就是不合法的。
    ②自定义函数取名与变量取名并不多，只是要在自定义函数的前面加上FN，这两个字母不能少也不能改变，如果是FN A(X)就是函数A。变量是A，自变量是X。如一次函数
y=kx+b
    要写成FN Y(X)=K*X+B，其中Y(X)是说Y随X变化而变化。其中括号中的X是不代表任何值的，它只是一个虚拟变量，它只是说明这个函数是关于哪个的函数，定义了等号左边的函数名后，等号右边一定要有这个虚拟变量，否则会出错。如
DEF FN A(R)=P*R*R
    是正确的，而
DEF FN A(Y)=P*R*R
    就是错的。
    ③自定义函数必须在一行内写完，不能分成几行来写。
    ④在调用这个自定义函数时必须用实际的数值、实际的变量或用意义的表达式来代替括号中的虚拟变量。当然也可以使用这个自变量的本身，这称为函数调用的嵌套。这样嵌有层数是不受限制的，只要内存够大，就可以一直嵌套下去。
    下面我们来看一个程序：
10 DEF FN S(X)=3.14159*X*X
20 PRINT 6;" ";FN S(6)
40 FOR I=1 TO 10
50 X=FN S(I)
60 PRINT I;" ";X
70 NEXT
80 RR=5
90 Y=4
100 SS=FN S(RR-Y)
120 PRINT RR-Y;" ";SS
130 END
运行
6 113.09724
1 3.14159
2 12.56636
3 28.27431
4 50.26544
5 78.53975
6 113.09724
7 153.93791
8 201.06176
9 254.46879
10 314.159
1 3.14159
    这上程序分别在第20、50、100行处调用了FN S(X)函数。其中第20行是求以6为半径的圆的面积，第40～70行是分别求以1～10为半径的圆的面积。第100行是求以RR-Y为半径的圆的面积。
第六章 数组
    在前面的课程里，我们讲到的都是简单变量，在这一章中，我们要学习另一种变量――下标变量。由一组下标变量组成的变量组合称为数组。
第一节 单维数组
    在处理实际问题时，我们往往会遇到一批同一类型的数据，如一面名学生的成绩，我们分别用S1,S2,S3,S4……S99,S100表示这100名学生的成绩，用S1表示第一个学生的成绩，用S5表示第五个的，用S99表示第九十九个的等。显然，用一批相同名字，不同下标的变量来表示同一属性的数据比用不同名字的变量更为方便，更能清楚地表示它们之间的关系。在数学，物理课上，我们经常用这种相同名字，不同下标的下标变量来表示一组具有相  性质的数据。
    在BASIC中，我们也可以用下标变量，并把同一名字，不同下标的变量称为数组。它的形式如下
S(8)
    S是变量名，括号内的8是下标。一个数组包括了数个下标变量，下标变量又可以称作数组元素。S(8)相当于数学符号S8，表示一组数组中的第八个数据。在BASIC程序中，必须把下标放在紧跟在变量后的一对括号中。不能把S(8)写成S8，后者中普通的简单变量名。
    下面我们来看一个求五个学生平均分的例子：
10 FOR I=1 TO 5
20 READ A(I)
30 A=A+A(I)
40 NEXT
50 P=A/5
60 PRINT "平均分为";P;"分"
70 DATA 62,71,96,88,84
80 END
运行
平均分为80.2分
    在第10～40句之间，READ把数据读取并赋给数组A(1)～A(5)，并把这些数组赋给简单变量A，第50行计算平均分。
    下标变量取名与简单变量取名一样，要用26个大写字母当头，以字母或数字接尾。下标变量的下标可以是常数，也可以是变量或表达式。下标最小值为0，而且只能是大于0的整数。
    只有一个下标的叫作单维数组。单维数组中，如果数组元素的个数不大于十个，那么就不用能数进行说明，否则要用DIM进行说明，如，如果我们要计算全班45个同学的总成绩就要用45个数组元数来表示这45个同学的成绩。如果用S作变量名，那我们就这样说明：
10 DIM S(45)
    DIM是数组定义语句，45是表示最大的下标值，如果在程序中下标大于这个值就会出错，这个语句相当于告诉程序，要预留45个空间存放这45个下标变量的值。下面我们再举个例说明：我们从1开始累加至100，并把每次的结果记录下来最后显示：
10 DIM P(100)
20 FOR I=1 TO 100
30 P=P+I:P(I)=P
40 NEXT
50 FOR I=1 TO 100
60 PRINT P(I)
70 NEXT
80 END
运行
1
3
6
10
15
……
5050
    数组在编程序时会经常用到，所以请大家一定要熟练运用。

第二节 多维数组
    上一节我们讲到了单维数组，一个单下标变量是由一个变量名和一个下标组成。那么，我们下面来看一个例子：见下表：
   a    b    c    d
A 123  15   58    0
B 15    9    9    2
C  8   100  45   12
    我们可经用Aa表示表格中的123，用Ac表示58等。如果我们把变量名设成A，那么它有下标要怎么取呢？我们可以这样：
    A,B,C,D（包括小写的a,b,c在内）分别用1,2,3,4表示。那么A(1,1)表示123，A(3,1)表示8，A(3,4)表示12等。像这种有两个下标的变量叫做二维下标变量，由这种二维下标变量组成的数组叫做二维数组。
    二维数组与单维数组的变量取我方式大同小异，在二维数组中，两个下标中间一定要用逗号(,)分开，并且下标是一组有序的整数，如果两个下标是两个不同的数，它们的位置不能改变，改变后就成了另一个二维下标变量了。如：
A(2,3)
    与
A(3,2)
    是两个不同的下标变量。
    二维下标变量的下标与单维下标变量的使用方法相同，可以是一个常数，或者是一个变量，也可以是一个算术表达式。在使用二数组之前一定要先用DIM对数组进行说明定义，定义的下标变量是对应的下标值将出现的最大值。下面举个例子来说明一下二维下标变量的用法：
    一个小学校有六个年级，第个年级有三个班。下面是第个班的人数，我们用数组来表示每个班的人数并打印在屏幕上：
      一班 二班 三班
一年级 32   34   30
二年级 40   38   39
三年级 26   29   29
四年级 43   46   41
五年级 30   31   30
六年级 24   26   23
    程序如下：
10 DIM A(6,3)
20 FOR I=1 TO 6
30 FOR J=1 TO 3
40 READ A(I,J)
50 NEXT
60 NEXT
70 FOR I=1 TO 6
80 FOR J=1 TO 3
90 PRINT I;"年级";J;"班有";A(I,J);"人"
100 NEXT
110 NEXT
120 DATA 32,34,30,40,38,39,26,29,29,43,46,41,30,31,30,24,26,23 
130 END
运行
1年级1班有32人
1年级2班有34人
1年级3班有30人
2年级1班有26人
……
6年级2班有26人
6年级3班有23人
    除了可以使用二维数组以外还可以用三维，四维甚至更多维。它们的定义方法与二维一样，每个变量的每个下标一定要用逗号分开。如：
A(3,2)二维
A(1,2,4)三维
A(1,1,5,4,1)五维
    等等，在实际运用中一定合理使用数组，它会使你的程序更简单明了。使编程序变得更轻松。

第七章 字符串
第一节 ASCII码
    我们在这之前已经遇到了很多字符串了，如
10 PRINT "I love GVBASIC"
    中用引号引起的就是字符串。
    我们用的英文字母，数字，标点符号，汉字，日文假名等都是字符。计算机为什么能显示字符呢？它是用什么方式记录字符的呢？我们这一节就来学习这些问题。
    我们都知道，计算机只能识别0和1两个数字，那么人们就利用这两个数字来编一些编码来表示这些这符，如：用二进数01000001表示大写字母"A"，用二进数01100001表示小写字母"a"等。我们把二进数01000001化成十进数为65，把二进数01100001化为十进数为97，实际上，65就是字母A的ASCII码，97就是字母a的ASCII码。换句话说，字符是用ASCII码来表示的。在文曲星GVBASIC菜单中按[求助]键可以查看。
    一般的，字符可以分为半角字符和全角字符两种。半角字符也叫半角符号，所有用一个字节表示的字符叫作半角符号，如英文字母，数字等，它们只用一个ASCII码表示。而像汉字这样的要占两个字节的字符叫做全角符号，它们用两个有序的ASCII码来表示。
    半角符号的ASCII码都小于128，而全角符号的两个ASCII都大于128。
    由一个或一个以上的字符就组成了字符串，一个字符或一个字符串可以用字符变量表示，在GVBASIC中，字符变量的取名方式与数值变量的取名方式差不多，只是要在变量名的最后加一个"$"号，字符串变量与数值变量一样可以是简单变量和下标变量，字符串的下标变量是在变量名与前括号"("之间加上"$"号。如A$,BV$,CYG$等是简单的字符串变量，如A$(5),VF$(15,6)等是字符串下标变量。

第二节 半角符号
    上一节我们已经讲到了半角符号，半角符号用一个小于128的数据作为ASCII码来表示，那么我们怎和才能知道一个半角符号的ASCII码呢？，这时，我们要用到求ASCII码的函数：
ASC(X$)
    这个函数就是求字符的ASCII码的，例如，我们要编一个程序，当我们用键盘输入一个字符，让计算机算出这的字符的ASCII码并打印出来：
10 INPUT A$
20 PRINT ASC(A$)
30 END
运行
?A
65
    这样我们就求出了字母A的ASCII码是65了。用ASC(X$)求X$的ASCII码时，如果X$是两个或两个字符以上的就返回第一个字符的ASCII码。那么我们要求第二个或第三个字符的ASCII码时又怎么办呢？我们就用
MID$(X$,A,B)
    来求吧，其中MID$(X$,A,B)表示的意思是从字符串X$的第A个字符开始取，一共取B个字符出来。举个例子来说吧：
10 X$="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
20 FOR I=1 TO 26
30 Y$=MID$(X$,I,1)
40 PRINT Y$;ASC(Y$)
50 NEXT
60 END
运行
A65
B66
C67
D68
E69
……
X88
Y89
Z90
    有时我们须要知道一个字符的长度，我们可以用
LEN(X$)
    来求X$的长度，如
10 INPUT X$
20 PRINT LEN(X$)
30 END
运行
?ABCD
4
    运结果是4，说明你输入的字符串一共有四个字节。

第三节 全角符号
    全角符号是由两个ASCII码组成的。我们先来看用INPUT给变量赋值，
10 INPUT X$
20 PRINT LEN(X$)
30 END
?我
2
    我们看到了汉字“我”是两个字节组成的。我们再来看用LET和READ-DATA给量赋值：
10 LET X$="我"
20 PRINT LEN(X$)
30 END
运行
3
    再来看：
10 FOR I=1 TO 4
20 READ X$
30 PRINT LEN(X$)
40 DATA "汉","※","あ","╋"
50 END
运行
3
3
3
3
    我们看到了，不管是用LET还是用READ给变量赋值，如果是一个全角符号时，它的长度就等于3，也就是说，如果是用键盘输入的全角符号是两个字节的字符，而在程序中赋的值则是三个字节。下面我们来看一下是怎第回事吧。
10 INPUT X$
20 FOR I=1 TO LEN(X$)
30 PRINT ASC(MID$(X$,I,1));" ";
40 NEXT
50 END
运行
?我是中国人
206 210 202 199 214 208 185 250 200 203
    下面我们用LET来看看：
10 X$="我是中国人"
20 FOR I=I TO LEN(X$)
30 PRINT ASC(MID$(X$,I,1));" ";
40 NEXT
50 END
运行
31 206 210 31 202 199 31 214 208 31 185 250 31 200 203
    对了，我们看到了，每个全角符号的ASCII码的最前面都多了一个31，这个ASCII码要不要都无所谓，只是要知道，全角符号在程序里赋值时有三个ASCII码，虽然有三个ASCII码，但显示出来时还是只占两这节，但在内存中却有三个字节，如果用INPUT赋值时，全角符号就只有两个ASCII码，这一点一定要记住了。

第四节 字符串的运算
    通过上面的三节，我们对字符串有了一定的了解。如果把两个字符串合在一起是怎么回事呢？我们来看一下就知道了：
10 INPUT A$,B$
20 PRINT A$,B$
30 C$=A$+B$
40 D$=B$+A$
50 PRINT C$,D$
60 END
运行
?ABCD
?EFGH
ABCD
EFGH
ABCDEFGH
EFGHABCD
    我们看到了，原来字符串相加就是把两个字符串合并在一起。
    有时我们想把大写字母改成小写字母，那怎么办呢？我们可以看一下ASCII码表，我们看到A的ASCII码是65，a的ASCII码是97，它们相差32，所以，我们可以用下面的程序来解决问题：
10 INPUT A$
20 B$=CHR$(ASC(A$)+32)
30 PRINT B$
40 END
运行
?M
m
    这里用到了CHR$()函数，这个函数是把一个ASCII码转换成相应的字符。大有想一想，如果要把小写字母改成大写字母又该怎么办呢？
    这里有一个数3.14159，我们要把这个数的整数部份和小数部份分开，我们可以这样：
10 A=3.14159
20 B=INT(A)
30 C=(A-B)*100000
40 PRINT B,C
50 END
运行
3
14159
    我们再来看另外一种方法：
10 A=3.14159
20 A$=STR$(A$)
30 B$=MID$(A$,1,1)
40 C$=MID$(A$,3,5)
50 B=VAL(B$)
60 C=VAL(C$
70 PRINT B,C
80 END
运行
3
14159
    运行结果是一样的，为什么会是一样的呢？我们来看，这里我们用到了STR$()和VAL()两个函数，STR$()是把数值型的数字转换成字符型的数字，用这个函数转换过的3.14159就不再是一个数个值了，而是一个字符串了，所以我们可以用MID$()函数从中读取要用的数字，读出来后，再用VAL()将字符型的数字再转换成数值型的数字，以便后面的计算。
    我们现在输入一个字符串，它的长度大于十，我们来取出它的最前面的三个和最后面的三个来组合在一起，我们可以有前学过的知识来实现：
10 INPUT A$
20 B$=MID$(A$,1,3)
30 C$=MID$(A$,LEN(A$)-2,3)
40 D$=B$+C$
50 PRINT D$
60 END
运行
?ABCDEFGHIJKLMN
ABCLMN
    我们已经知道MID$可以取字符串，现在我们再来学两个取字符串的函数，LEFT$(X$,A)和RIGHT$(X$,A)。LEFT$(X$,A)表示从字符串X$中取出从左边第一个开始的A个字符，RIGHT$(X$,A)则是取出X$从右边第一个开始的A个字符。上面的例子还可以用下面的程序来实现：
10 INPUT A$
20 B$=LEFT$(A$,3)
30 C$=RIGHT$(A$,3)
40 D$=B$+C$
50 PRINT D$
60 END
运行
?ABCDEFGHIJKLMN
ABCLMN
第五节 字符串的比较
    字符串可以用ASCII码来比较，其中数字小于大写字母小于小写字母，半角符号小于全角符号。
    汉字的ASCII码是按汉语拼音来排列的，我们知道，汉字有两个ASCII码，我们把汉字的第一个ASCII码减160乘以100再与第二个ASCII码减160的差相加，我们用下面的例子来说明：
10 INPUT A$
20 A=ASC(A$)-160
30 B=ASC(RIGHT$(A$,1))-160
40 C=A*100+B
50 PRINT C
60 END
运行
我
4650
    我们来看，其实，这个4650就是汉字“我”的区位码。
    如果两个字符串相等，就说明这两个字符串当中的所有ASCII码相等。下面我们举个例子：输入一个长度不大于50的半角字符串，把这个字符串中的字符按ASCII码从小到大排列：
10 DIM$ X$(50):INPUT A$
20 FOR I=1 TO LEN(A$)
30 X$(I)=MID$(A$,I,1):NEXT
40 FOR I=1 TO LEN(A$)
50 FOR J=I TO LEN(A$)
60 IF ASC(X$(I))>ASC(X$(J)) THEN SWAP X$(I),X$(J)
70 NEXT:NEXT
80 FOR I=1 TO LEN(A$)
90 W$=W$+X$(I):NEXT
100 PRINT W$
110 END
运行
?ZYXWVUTSRQPONMLKJIHGFEDCBA
ABCDEFGHIJKLMNOPQRSTUVWXYZ
    这个程序中间出现的一个语句SWAP是变量互换语句。它的用法是SWAP A,B
SWAP A$,B$
    它将A的值赋给B，同时把B的值赋给A。大家再想想，如果要把输入的字符串按ASCII码从大到小排列又该怎么办呢？
    有时我们要读取我们按下的键是哪个，这时我们就要用到INKEY$了。这个读键值语句在程序的菜单中用得最多，如
10 CLS:PRINT "1.进入","2.帮助","3.退出"
20 T$=INKEY$
30 IF T$="b" THEN 100
40 IF T$="n" THEN 200
50 IF T$="m" THEN END
60 GOTO 20
100 REM 进入主程序
110 ……
……
200 REM 帮助程序
210 ……
……
500 END
    这样，当按下B键（文曲星键盘上对应1，N对应2，以此类推）就进入主程序了，按下N键就进入帮助菜单中了，按下M键就退出程序了。第60行是为了使当按下的键不符合规而返回重新按键用的。
    注意：一定要将INKEY$读取的键值赋给别个变量（例子中是赋给T$的），否则会出错。
第八章 数据文件
第一节 顺序文件
    在计算机中，有两种文件存在，一种是可执行的文件，如exe、bin、bas、lav等叫执行文件，也叫程序文件；另一种则是用来储存数据的非执行文件，如dat、bmp、txt、ebk等叫做数据文件。在我们编程序时由于一关机，存在RAM中的数据都随之消失了，有时我们就需要把数据存起来，比如把写好的文件存起来，把游戏的进度存起来，把处理好的数据存起来等，这时就要用到数据文件。我们这里就简单介绍一下文曲星中用的DAT文件。DAT文件按照打开的方式可以分为顺序文件和随机文件两种，下面我们先讲顺序文件。
    顺序文件的打开语句是OPEN，打开方式有三种，只写，只读和追加。格式如下：
    1.只写格式：
OPEN "DATA" FOR OUTPUT AS #1
    意思是打开名叫"DATA"的文件作为1号文件写入数据。如果这个文件不存在，则系统会自动创建一个。
    2.只读格式：
OPEN "DATA" FOR INPUT AS #1
    意思是：打开名叫"DATA"的文件作为1号文件读出数据。如果这个文件不存在，或数据文件中无数据则会出错。
    3.追加方式：
OPEN "DATA" FOR APPEND AS #1
    意思是：打开名叫"DATA"的文件作为1号文件写入数据。用OUTPUT也是写入数据，这两种打开方式不同的地方是：用OUTPUT打开一个文件时会自动把文件清空，而用APPEND则不会清空。
    当我们用OUTPUT或APPEND打开一个文件后，要用WRITE写入数据，当用INPUT打开一个文件后则要用INPUT来读出数据。数据读写完毕后不要忘了用CLOSE把文件关掉。
    下面我们举个例子说明，如我们这有五个学生，他个的语文和数学成绩如下表，要求创建一个顺序文件把他们的姓名，语文成绩，数学成绩和平均成绩保存起来：
姓名   语文   数学
孙二    98     67
张三    85     88
李四    68     92
王五    49     64
赵六    91     95
程序如下：
10 DIM NAME$(5),YW(5),SX(5),PJ(5)
20 FOR I=1 TO 5
30 READ NAME$(I),YW(I),SX(I)
40 PJ(I)=(YW(I)+SX(I))/2
50 NEXT
60 OPEN "PJCJ" FOR OUTPUT AS #1
70 FOR I=1 TO 5
80 WRITE #1,NAME$(I),YW(I),SX(I),PJ(I)
90 NEXT
100 CLOSE #1
110 DATA "孙二",98,67,"张三",85,88,"李四",68,92,"王五",49,64,"赵六",91,95
120 END
    这样，系统就会创建一个名叫"PJCJ"的文件并把姓名，语文成绩，数学成绩和平均成绩保存起来了。我们下面再编一个程序，把这个文件中的数据读出来并打印在屏幕上：
10 DIM A$(5),A(5),B(5),C(5)
20 OPEN "PJCJ" FOR INPUT AS #1
30 FOR I=1 TO 5
40 INPUT #1,A$(I),A(I),B(I),C(I)
50 LOCATE I,1:PRINT A$;" ";A;" ";B;" ";C;
60 NEXT
70 CLOSE #1
80 END
运行
孙二 98 67 82.5
张三 85 88 86.5
李四 68 92 80
王五 49 64 56.5
赵六 91 95 93
    如果我们还要在PJCJ中再加一个人的，如田七，语文79，数83。程序如下：
10 OPEN "PJCJ" FOR APPEND AS #1
20 A$="田七":A=79:B=83:C=(79+83)/2
30 WRITE #1,A$,A,B,C
40 CLOSE #1
50 END
    这样PJCJ中就有六个人的数据了。
    下面我们再把PJCJ中的数据读出来再把它存到ABCD里面。
10 OPEN "PJCJ" FOR INPUT AS #1
20 OPEN "ABCD" FOR OUTPUT AS #2
30 FOR I=1 TO 6
40 INPUT #1,A$,B,C,D
50 WRITE #2,A$,B,C,D
60 NEXT
70 CLOSE #1:CLOSE #2
80 END
    这样就把PJCJ中的数据存到ABCD中去了。
第二节 随机文件
    上一节我们讲到了顺序文件，它可以很方便地储存数据。但它要写只能从第一个记录开始写，要读只能从第一个记录读。如果我们要读取一个拥有几百个记录的文件中读取最后一个，那就要把前面的记录全部读出来后才能得到你要的记录，而这样会花很多时间去读文件，而且还可能因为内存不足而产生内存溢出的错误。随机文件就能解决这个问题了。它可以按顺序读写，也可以任意读写其中的任意一个记录。
    随机文件的打开方式只有一种，即
OPEN "DATA" FOR RANDOM AS #1 LEN=128
    这句程序的意思是：打开名叫DATA的随机文件作为1号文件，其每个记录的长度为128个字节。在文曲星中，规定的随机文件单个记录和长度不能超过128个字节。我们要根据实际情况来确定单个记录的长度，以便既能存下每个记录，又不占用多余的闪存空间。
    打开一个文件并规定一个记录的长度后就要用FIELD为每个变量划分空间。如，我们一个记录中要存一个姓名，电话，那么就要划分姓名占多小个字节，电话占多小个字节。
    一切准备就绪，就要写文件了，我们可以用LSET（以左对齐方式写）和RSET（以右对齐方式写）来写数据，并用PUT来存放。如果要读取，就用GET来读取。
    下面我们举个例子说明。我们有一个班，一共有32名学生，要编一个程序，用随机文件把这些学生的姓名和语文成绩记录下来：
    分析：中国人的姓名一般不超过三个汉字，三个汉字占6个字节，成绩不会超过4个字节。所以姓名的长度加上成绩的长度为10个字节。我们就规定一个记录的长度为10。
    首先，我们先打开一个文件：
10 OPEN "CJ" FOR RANDOM AS #1 LEN=10
    然后分配变量，我们用NAME$存名字，用CJ$存成绩。
20 FIELD #1,6 AS NAME$,4 AS CJ$
    这下该写数据了，如第一个写我吧，我的名字叫薛顺健，成绩为82分，由于在程序中为变量赋一个汉字时，这个汉字是三个字节，因此我们先对汉字处理一下，舍去每个汉字的第一个字节：
30 A$="薛顺健":CJ=82
40 P$="":FOR I=1 TO LEN(A$)/3
50 P$=P$+MID$(A$,I*3-1,2)
60 NEXT
70 LSET NAME$=P$:LSET CJ$=STR$(CJ)
    因为随机文件只支持字符，不支持数值，所以要把CJ转换成字符型的变量CJ$。下面就该存了：
80 PUT #1,1
    这样，就把我的数据存入了第一个记录当中了。下面我们再重复上面的步骤来存下一个记录，第二个就存张三吧，成绩为92分：
100 A$="张三":CJ=92
110 P$="":FOR I=1 TO LEN(A$)/3
120 P$=P$+MID$(A$,I*3-1,2)
130 NEXT
140 LSET NAME$=P$:LSET CJ$=STR$(CJ)
150 PUT #1,2
    好了，又把第二个记录写好了。这样下去就可以把32个记录全部写完。简单吧。当然，这样写太慢了，我们可以编一个循环，把要存的数据用DATA放到程序的最后，再用一个循环来存放：如
10 OPEN "CJ" FOR RANDOM AS #1 LEN=10
20 FIELD #1,6 AS NAME$,4 AS CJ$
30 FOR I=1 TO 32
40 READ A$,CJ
50 P$="":FOR J=1 TO LEN(A$)/3
60 P$=P$+MID$(A$,J*3-1,2):NEXT
70 LSET NAME$=P$:LSET CJ$=STR$(CJ)
80 PUT #1,I:NEXT
90 CLOSE #1
100 DATA "薛顺健",82,"张三",92
110 DATA "李长生",73,"黄原",98
120 DATA……
……
200 END
    为了节约篇幅，从100行开始，你可以自己填入数据，这样就把32个文个全部写入随机文件了。这样你可以用任意一个程序随时打开这个文件并按这个程序中的分配方式来分配变量的话，你就可以地其中任何一个记录进行修改。如我要把第二个记录改成李四，成绩为63分：
10 OPEN "CJ" FOR RANDOM AS #1 LEN=10
20 FIELD #1,6 AS NAME$,4 AS CJ$
30 A$="李四":CJ=63
40 P$="":FOR I=1 TO LEN(A$)/3
50 P$=P$+MID$(A$,I*3-1,2):NEXT
60 LSET NAME$=P$:LSET CJ$=STR$(CJ)
70 PUT #1,2
80 END
    这样就把记录二改成了李四了。
    下面我们再讲一下读取吧。如上面的那个随机文件，我们如果要从第二个记录开始读取，读取三个记录，程序这样写：
10 OPEN "CJ" FOR RANDOM AS #1 LEN=10
20 FIELD #1,6 AS A$,4 AS B$
30 FOR I=2 TO 4
40 GET #1,I
50 CLS:PRINT A$,B$
60 NEXT
70 END
运行
李四
63
李长生
73
黄原
98
    当我们以随机文件的方式打开一个文件（不管这个文件是否以随机文件的方式存入的）后，可以用LOF(1)来读取这个文件的长度，可以看LOF(1)是否为0来判断这个文件是否存在。

第九章 图象与音声
第一节 点与线
    在文曲星中提供了几个画图语句，下面我们先来说一下画点和画线吧。一般画图先用GRAPH命令将模式切换到画图模式。
    画点用DRAW，它的用法是：
DRAW X,Y,A
    其中X是点的横坐标，Y是点的纵坐标，A是画点模式，即A=1画点，A=0清点，A=2反白三种模式。画点是指不管以前这个坐标上的点是否是黑色都将该坐标上点显示为黑色。清点则是不管以前这个坐标上的点是否为白色都将这个坐标上的点显示为白色。反白则是指把该坐标上原来黑色的点显示为白色的点，或把原来这个坐标上白色的点显示为黑色的点。如果不写A，则程序默认为A=1:如：
10 GRAPH
20 FOR I=1 TO 500
30 DRAW 80,40
40 DRAW 80,40,0
50 NEXT
60 END
    运行后我们会看到屏幕正中间有一个点在闪烁，因为这个程序在相同的坐标下不断地画点和清点造成的。又如：
10 GRAPH
20 FOR I=1 TO 50
30 DRAW 80,40,2
40 NEXT
50 END
    我们会发现这个程序与上面的程序的结果是一样的。
    我们可以用循环来控制点画一条线，如：
10 GRAPH
20 FOR I=0 TO 160
30 DRAW I,40
40 NEXT
50 END
    运行后会在屏幕中间出现一条横线。
    当然我们还可以用LINE画线，格式为：
LINE X,Y,XX,YY,A
    其中X为起始端点的横坐标，Y为起始端点的纵坐标，XX为终止端点的横坐标，YY为终止端点的纵坐标，A为画线模式。画线模式与画点模一样。如
10 GRAPH
20 LINE 80,20,40,60
30 LINE 40,60,120,60
40 LINE 80,20,120,60
50 END
    运行结果为一个三角形。又如
10 GRAPH
20 FOR I=10 TO 70
30 LINE I/2,I,I/2+50
40 NEXT
50 END
    运行结果是一个填了心的平行四边形。

第二节 矩形，圆与椭圆
    画矩形用BOX，它的格式为：
BOX X,Y,XX,YY,A,B
    其中的X,Y,XX,YY分别是两个对角的横坐标与纵坐标。A为填充模式，B为绘制模式。当A=1填充，当A=0不填，绘制模式与画点模式一样。如：
10 GRAPH
20 BOX 10,10,150,70,0,1
30 END
    运行对果为一个空心矩形。
    画圆用CIRCLE，格式为
CIRCLE X,Y,R,A,B
    其中的X,Y为圆心坐标，R为圆半径，A为填充模式，B为绘制模式。填充模式和绘制模式与矩形的一样。如
10 GRAPH
20 CIRCLE 80,40,30,1,1
30 END
    运行结呆是在屏幕中间画一个实心圆。
    画椭圆用ELLIPSE，格式为：
ELLIPSE X,Y,RX,RY,A,B
    其中X,Y为圆心坐标，RX,RY分别为横向半径与纵向半径，A,B分别为填充模式和绘制模式。如：
10 GRAPH
20 ELLIPSE 80,40,60,30,0,1
30 END
    运行结果为一个空心椭圆。
    具体给画出个什么东西来，请大家仔细琢磨，我就不必一一讲述了。

第三节 声音
    在文曲星中提供了声音的命令，用PLAY可以播放音乐。PLAY后面跟一个字符串或一个字符串变量。这个字符串要用以下数据表示：
02,03,04分别表示低音，中音和高音。
CDEFGAB分别表示1234567
L表示音长，其长度用1到255之间的整数表示，数值起大，音长越短。如L8。下面看一段音乐：
10 PLAY "O3L8EL4GL8AL3EL9DCDEO2AL3G"
20 END
    运行是歌曲《梅花三弄》的第一句曲。
    文曲星中还有一个发音的命令，BEEP，它可以使蜂鸣器发出“哔”的一声。如：
10 T$=INKEY$
20 IF T$=CHR$(27) THEN END
30 IF T$=CHR$(13) THEN BEEP
40 GOTO 10
50 END
    运行后如果按输入键就发出“哔”的一声，按跳出键退出程序。
第十章 系统函数
第一节 查看内存
    在文曲星BASIC助手中除了前面讲述的基本语句外还提供了PEEK，POKE和CALL三个系统函数，它能像汇编一样直接操作文曲星的内存。下面我们先讲PEEK，这是一个查看内存的命令。那么我们先来了解一下文曲星的硬件吧。内存是什么呢？它是用来存放数据的。内存就像是一个个的格子，一个格子就是一个内存单元。每个内存单元用来存放指定的数据，一个内存单元占一个字节，那文曲星中有那么多内存单元，要怎么才能找到你要的那个呢？不必担心，因为每个内存单元我们都给它一个编号，这个编号我们把它叫作这个内存单元的地址。内存根据作用的不同可分为RAM，闪存和ROM三种。
    PEEK就是用来查看RAM的，我们来看一下，
10 A=PEEK(1064)
20 B=PEEK(1065)
30 C=PEEK(1066)/2
40 PRINT A;":";B;":";C
60 GOTO 10
    大家注意一下就能看出这就是系统的时间。也就是说，PEEK(1066)就是系统时间的秒，那么1066这个地址存的系统时间秒的数据，不过这个数据是屏幕上显示的数据的二倍，所以要除以二。再来看一个：
10 FOR I=8136 TO 8141
20 PRINT CHR$(PEEK(I));
30 NEXT
40 END
    运行后你可能会发现，怎么我们系统密码被打印出来了呢？其实，8136至8141这六个地址中存的就是密码，因为在内存中存的都是ASCII码，所以要用CHR$()转换成字符。各机型的PEEK可以参照附录中的PEEK码表。
第二节 修改内存
    我们既然能查看内存，当然能修改，那么我们可以用POKE来修改，我们可以把现在的数据写入原来的地址中，覆盖起原来的数据就行了，那么要写什么？写到哪里呢？这就要看POKE后面的参数了：
POKE X,Y
    中的X是要写入数据的地址，Y就是要写入的数据，如：
10 POKE 704,65
20 PRINT;
30 END
    我们通达PEEK码表可以看到，704至859是存字符的这符缓存，这里第10行就是将65写入字符缓存当中，因为是字符，所以65就应该是一个ASCII码，所以这就是在地址704写一个字母A。第20行就用来更新屏幕，把A显示出来的。
    我们都知道，用PRINT无法在屏幕最右下角打印字符。那么用POKE直接写入就能实现了，我们来算一下，一行能打印20个字符，五行就是100个，第一个字符缓存地址是704，那么第100个就是803了。我们就可以往803里写入数符的ASCII码，再用PRINT更新到屏幕就行了，如：
10 POKE 803,65
20 PRINT;
30 END
    这样就在屏幕的最右下角写了一个字母A。
    警告：由于POKE是直接操作内存地址的函数，因此建议你不要改你不知道存的是什么东西的地址。在为如果将某个系统地址改了可有会导致严重死机甚至到无法修复的地步。请大家一定要慎重使用POKE命令。
 
第三节 调用命令
    关于CALL语句，本人对它的了解也不是很深，在这里挑一些简单的讲。
    我们已经知道，文曲星内存中一共有三种内存，其中有一种是ROM，这个ROM是一个只读存储器，它里面存的就是各种命令，那么当使用CALL就可以调用这些命令。如：
10 POKE 803,65
20 CALL 57638
30 END
    这个CALL 57638实际上和PRINT有同样的用法。实际上，CALL 57638是叫CPU到57638执行命令，执行完毕后再把控制权交给BASIC解释器。
    警告，CALL比POKE更恐怖，一但地址写错，会造成比POKE更为严重的后果，如果POKE是一颗原子弹，那CALL就是氢弹，请大家一定要谨慎使用。
前言
    
第一节 GVBASIC的来源
    自从文曲CC800和PC1000问世以来，北京金远见就开发了一系列拥有BASIC开放式编程平台的机型。从此以后，GVBASIC编程便成了广大星迷的一大爱好。GVBASIC与传统的BASIC的语法差不多，有一些地方不一样。在文曲星上编程也是非常方便的，学生可以用它编一些常用的软件来解决学习中遇到的各种复杂的科学计算。技术人员可以用它编成专门的程序用于设计，计算各种图片或处理各种数据。当然还可以编出很多游戏，利用文曲星内置的图片，结合自己用画图语句画出的图形就可以做出难度最高的RPG游戏（如《动物园历险记》，《伏魔英雄传》等）和趣味性强的智能游戏（如《贪吃蛇》，《八块扑克》等）。本人也追随着BASIC的尾声后来居上，成为了BASIC编程中的一个发烧友（烧得比较厉害的那种），当BASIC编程成了广大星迷的另一爱好时，同时很多星迷都加入了BASIC编程的行列。但由于目前市面上已经没有与GVBASIC内容相似的书籍卖了，因此很多星迷都只能望文兴叹了。为了实现广大星迷想成为BASIC高手的愿望，本人根据个人的经验，参考了相关书籍和文曲星网站，特编写了这本BASIC教程。本教程完全符合文曲星上的BASIC语法，希望能对大家有所帮助。

第二节 GVBASIC的语法
    那么什么是BASIC语言呢？BASIC语言是一种国际通用的电子计算机高级语言。是一种非常适合初学者使用且实用的计算机高级语言，它不仅拥有科学计算的能力，还拥有数据处理，事务管理，绘图，音乐，游戏等功能。
    BASIC是Beginner's All-purpose Instruction Code（初学者通用符号指令代码）的缩写。它用很多种版本，如G-BASIC(GAME BASIC),F-BASIC(FAMILY BASIC),GVBASIC(GOLD VIEW BASIC)等。能在文曲星上运行的BASIC是GVBASIC。本教程的内容均讲的是GVBASIC。
    那么什么是BASIC程序呢？下面我们来看一段程序：
10 LET A=11
20 LET B=12
30 LET C=8
40 LET D=9
50 LET P=A+B+C+D
60 LET Q=P/4
70 PRINT Q
80 END
    这就是一个简单的BASIC程序。它的功能是求出A,B,C,D四个数的和P与平均数Q，并把平均数Q显示在屏幕上。像这种用BASIC语言编成的程序就叫BASIC程序或BASIC源程序。文曲星的GVBASIC源程序有以下规定：
    ①一个完整的程序分若干个行。每行前都以数字开头，这个数字称为行的标号，简称行号。行号必须是无符号的整数，计算机会按行号的大小顺序执行各语句。行号的范围为0～9999。写程序时标号可以不按大小顺序写，程序送入内存时BASIC解释系统会自动排序。行号不一定要连续，一般每两行间隔为10，以便在修改时还可以插入1～9个语句行。一般一行只写一个语句，也可以并列写几个语句，用冒号(:)把各语句分开。每个语分别让计算机执行一个特定功能。也可以说程序是由若干个语句集合而成的。
    ②一个语句行必须有三部份，即行号，语句定义符和语句体。语句定义符规定计算机执行某一种特定的功能。如上例中的LET，表示赋值（注：在GVBASIC中有且只有LET可以省略，其它的都必须写，否则计算机会认为是非法的）。语句体跟在语句定义符后面需要执行的具体内容。如上例的第50行：
50 LET P=A+B+C+D
    表示将A,B,C,D的和赋给变量P。
    ③每个语句行有长度限定的，在文曲星的GVBASIC中，一般为92个字节。
    ④程序一般以END结束，当然也可以不写END。不过若程序是在程序中间结束就必须加END，否程序会接着运行后面的程序。
    ⑤程序送入内存后不会马上运行，直到用户在GVBASIC环境下发出RUN（运行）命令后才会运行。不过现在的很多机型已经内置了BASIC助手，只要将程序保存，按[输入]键就可以直接运行了。在后面的内容中如果没有特别说明是在GVBASIC环境下的话，一般是指在GVBASIC助手中运行。
 
第一章 最简单的程序
 
第一节 打印语句
    在BASIC程序中，PRINT(打印语句)表示输出数据到屏幕的意思。它具有以下功能：
    1.打印变量或表达式的值，就是说，PRINT既可以打印，又可以计算。如：某一变量已被赋过值，则可以用PRINT将这个变量的值打印出来。
10 LET X=3
20 PRINT X
30 END
运行
3
    又如：
10 A=1:B=2:C=3
20 PRINT A,B,C,A+B+C
运行
1
2
3
6
    如果表达式中包括变量，那这些变量必须要被赋过值，否则计算机会把它作0处理。
    2.打印字符串。如果字符串用两个引号(")引起来，放到PRINT的后面，运行后则会原样照印。如：
10 PRINT "ABCD"
20 END
运行
ABCD
    又如：
10 PRINT "我是中国人！"
20 END
运行
我是中国人！
    再看一个：
10 PRINT "36+4"
20 END
运行
36+4
    这里要注意：如果一个表达式用引号引起来后，PRINT就会把它当作字符串处理而不被计算。
    可以看出，引号中的不管是中文，英文，数字，符号或空格，都会原样照印。值得提出的是：由于引号本身是作为字符串起止界限用的，所以它本身不能作为一个字符使用。
    这里指出一些对菜鸟来说比较易混淆的问题：如
10 PRINT X,Y
20 END
运行
0
0
    这个程序的运行结果是打印X,Y的值，而不是打印"X","Y"这两个字母。
    又如：
10 PRINT X=3*5
20 END
运行
0
    原本是希望计算机输出X=15来，但计算机却没能如愿。如果要使计算机输出X=15这样一个结果，那程序就要像下面这样编：
10 PRINT "X=";3*5
20 END
运行
X=15
    注意：这里用的是分号(;)，以紧凑格式输出而光标不用提行。而用逗号(,)则会提行，所以不能在屏幕最下行输入结果。因此要在最下行输出结果就要在表达式最后加一个分号。如
10 PRINT 10,20,30,40,50
20 END
运行
20
30
40
50
]
    最下行是光标("]"代表光标)而最上行的10被顶上一行而消失了。又如
10 PRINT 10,20,30,40,50;
20 END
运行
10
20
30
40
50]
    这样，光标就紧跟在"50"的后面了。但要在最后一行最后一列输出数据却不行，这要到本教程的第九章才会讲到。
    在此，请用户要仔细揣摩一下引号(")，逗号(,)和分号(;)的用法。
    有时，我们需要在指定的位置打印字符。可以用到置光标语句LOCATE，它的格式为：
10 LOCATE X,Y
    其中的X为行，Y为列。比如：
10 LOCATE 3,9
20 PRINT "中国"
30 END
运行


       中国
    这个程序把“中国”两个字打印在屏幕的正中。
    X，Y的取值范围分别为：
1≤X≤5
1≤Y≤20

第二节 数的表示
    在BASIC中，数的表示有以下四种规则）    ①数字都采用十进制，每个数中间不能有空格，也不能用分隔号(')分开。
    ②文曲星的BASIC解释系统中一般只能容纳9位有效数字。
    ③在数学中，我们可以用科学计数法表示一些非常大的数（如中国的人口是1300000000人）和非常小的数（如蜗牛的速度是0.0000079千米／秒）。但与我们在数学中用的方法有点不同，它用字母"E"表示幂的底数10，"E"的前面表示乘号"×"前面的数，"E"的后面表示幂的指数。如
1300000000=1.3E+9
0.0000079=7.9E-6
    "E"的前面的数叫做尾数，"E"的后面的数叫做阶码。阶码大于0时，"+"号可以省略。
    ④在文曲星中，数的表达范围有一定的限制，一般是：整型变量的下限为-32768，上限为32767；实型变量的下限为-1E+38，上限为1E+38。

第三节 运算规则
    1.变量，在前后的课程中我们已经讲到了变量，如程序：
10 A=10:B=A+12
20 C=B/A
30 PRINT C
40 END
    中的A,B,C都是变量，变量是用来存放数据的。变量按类型可以分为数值变量和字符串变量，按功能又可分为普通变量和下标变量。普通数值变量的变量名必须以大写英文字母开头，后面可以跟大写英文字母，数字或小写英文字母。但不能有特殊的符号，也不能以小写英文字母或数字开头。如ABC,A35,Aa是合法的变量名。而如c5,6Y,J@就是非法的变量名，在文曲星BASIC中，变量名的长度不能大于个16字节。
    2.运算符。BASIC中的运算符与数学中的运算符有一定的区别。见下表：
    A.数值运算符：
+     加
-     减
*     乘
/     除
^     乘方
    B.关系运算符：
=     等于
<     小于
>     大于
<=    小于或等于
>=    大于或等于
<>    不等于
    C.逻辑运算符：
OR    逻辑或
AND   逻辑与
NOT   逻辑非
    3.运算规则。与数学运算一样，BASIC的运算规则也是先乘除，后加减，乘方优先于乘除，函数优先于乘方，括号优先于函数，在BASIC中，括号没有大、中、小之分，全部都用小括号"()"，小括号可以内外成对套用，运算时先算最里层的，再算次外层的，最后算最外层的。
    下面我们总结一下运行优先顺序：
里层括号→外层括号→函数→乘方→乘除→加减
    4.表达式，在数学中，我们把运算符号和括号将常数、变量、函数等连接起来组成一个有意义的式子叫做代数表达式，简称代数式。如：
  2    2sinA
5x -3x-―――
         3 
    （注：由于电脑上打字不能打出指数，所以只能用这种方式了，它表示的是：5乘以X的平方减3乘以X减3分之A的正弦。下面的代数式同理。）
    同样，在BASIC中把符合BASIC规定的、用运算符和括号将常数、变量、函数等连接起来的式子就叫做BASIC算术表达式，简称表达式。如上面的代数式可写成下面的表达式：
5*X^2-3*X-2*SIN(A)/3
    应该注意，在BASIC的算数表达式中，每一个符号都占一个字节，所有的符号都必须一个一个并排地写在同一条线上，不能在右上角写指数，也不能在右下角写下标。
    下面是一些代数式与BASIC表达式的对照
代数式
２πＲ
表达式
2*P*R(P=3.14159)
代数式
Ｕ
―
Ｒ
表达式
U/R
代数式
       １    2
Ｖ ｔ＋―ａｔ
  0    ２
表达式
V0*T+A*T^2/2
代数式
  ＿＿＿＿＿＿＿＿
√s(s-a)(s-b)(s-c)
表达式
SQR(S*(S-A)*(S-B)*(S-C))

第四节 修改程序
    学完前面的内容，我们已经可以用BASIC语言编一些最简单的程序了。那么，在编好程序后可能会出现一些错误或不能达到我们期望的目的时就要对程序作一些修改，那么要怎么才能修改程序呢？
    在GVBASIC环境下，我们可以用LIST命令来调用并显示出我们想修改的程序，如：
10 A=1
20 B=2
30 C=3
40 D=5
50 PRINT A;+;B;+;C;+;D;
60 END
运行
1
?SYNTAX ERROR IN 50
    我们的目的是想让计算机给出如下答案
1+2+3+5
    但计算却报错。这时我们可以用
LIST 50
将第50行调出，以便修改。
    如果是在BASIC助手中，可以直接F4修改。如果程序较大，可以把第一行的行号改成你要前往的行号小1，并把程序内容清除掉，按输入键就能到达你要修改的行号。如你要到第500行：
源程序为
10 LET A=5
20 LET B=A*6
……
你可以将程序的第10行改成：
499]
20 LET B=A*6
……
(]为光标)
    此时按输入就能到达第500行。不过要注意，第499行一定不能有内容，否则这样会把第499句清除掉。

第二章 数据的提供
 
第一节 赋值语句
    用赋语句LET给变量赋值是比较简单的一种，应用相当广。如
10 LET A=1
20 LET B=7
30 LET C=12
40 LET X1=(-B+SQR(B*B-4*A*C))/(A*2)
50 LET X2=(-B-SQR(B*B-4*A*C))/(A*2)
60 PRINT "X1=";X1,"X2=";X2
70 END
运行
X1=-3
X2=-4
    从上面的例子中可以看出，程序中所有的变量A、B、C、X1、X2都必须赋予确定的值，而且第40、50行中的变量A、B、C都必须被赋过值，否则执行40和50行时系统会把它们作为0处理。
    LET可以反复的对一个变量赋值，而这个变量的值以最后一次被赋的值为准，也可以把一个变量的值赋给别一个变量，如：
10 LET A=10
20 LET A=20
30 LET B=A
40 LET C=B
50 PRINT A,B,C
60 END
运行
20
20
20
    LET也可把一个表达式的值赋给一个变量，在赋值前，LET语句会先算出表达式的值，再把这个值赋给变量。如上面解方程的程序的第40和50行。
    LET语句中的等号"="表示赋值，不表示相等，所以，等号左边不能与等号右边对调位置，如
X=A+B
    不能写成A+B=X。
    在BASIC中常常会看到
LET A=A+1
    这样的一个式子，这在打数中不错的，因为A不可能与A+1相等。但在BASIC中这句程序表示的是：先将等号右边的表达式A+1值计算出来，再把计算出来的值赋给等号左边的变量A。
    在同一个LET语句中不能同时给两个或两个以上的变量赋值，也为能用连等的方式给变量赋值，如
10 LET A=2,B=A,C=5
20 LET A=B=2
    中的第10行和20行都是错的。应该写成
10 LET A=2:LET B=A:LET C=3
20 LET A=2:LET B=2
    在BASIC中，赋值语句符LET可以省略不写，如：
10 LET A=20
    可以写成：
10 A=20

第二节 键盘输入语句
    在很多时候，如果我们用LET给一个变量赋值是很不方便的，如：我们编一个解方程的程序，如果用LET给变量赋值的话，那每解一个方程我们都要重新修改程序里的变量的值，也就是说要用LET重新给变量赋值。在这里我们就要用到另一种赋值语句了，它就是键盘输入语句INPUT，利用键盘输入语句，程序会在要输入数据时提醒你利用键盘输入你要的数据，很方便。如，我们看一下下面的这人公式：
1  1  1  1  1
―=―+―+―+―
R  R1 R2 R3 R4 
    这是一个计算并联电路电阻的公式，那么在程序中要怎样才能用INPUT给这个公式里的每一个变量赋值呢？下面我们来看：
10 INPUT R1
20 INPUT R2
30 INPUT R3
40 INPUT R4
50 R=1/R1+1/R2+1/R3+1/R4
60 PRINT R
70 END
运行
?2←
?4←
?5←
?8←
1.075
    (注：在程序运行中，输入键"←"号是不会显示在屏幕上的，这里只是为了方便大家认识，下面的程序中就不再使用这个符号了，只要大家能知道用INPUT给变量赋值要按输入键就行了。)
    这样就很方便的为变量赋值了。当然，我们可以用一个INPUT语句同时给多个变量赋值，每个变量的中间我们用一个逗号分开。如在这个程序中的第10～40行，我们可以用一个语句完成，上面的程序可以用下面的程序代替：
10 INPUT R1,R2,R3,R4
50 R=1/R1+1/R2+1/R3+1/R4
60 PRINT R
70 END
    这个程序的运行结果与上面的那个是一样的，只是这个程序中只用了一个INPUT语句。但有些时候我们还要在输入一个数据前给点提示。如程序在要求我们输入姓名时会提示你“姓名”两个字，输入年龄时会提示你“年龄”两个字等，这时你可以把一个用引号引起的字符串放在INPUT语句与变量名的中间，并用分号";"把变量名与提示语分开。如：
10 INPUT "姓名:";NAME$
20 INPUT "年龄:";AEG
30 PRINT "姓名:";NAME$,"年龄:";AEG
40 END
运行
姓名:文曲星←
年龄:24←
姓名:文曲星
年龄:24
    (注：在BASIC中。字符串变量要在变量名的后面加一个"$"号，这个会在第七章详细讲解。)
    这样就把那个问号"?"给消除了。如果你只想消除问号，那你就在引号中什么字符都不放就可以了。

第三节 无条件跳转
    在程序中，我们往往会遇到一些需要重复的运行同一段程序。如上一节输入姓名和年龄的程序中一样，如果我们要输入几个人的姓名和年龄时就要重新运行几次这个程序。或则有时候程序运行到一个地方可以不用接下面的程序运行时，我们想要程序跳过某段程序时，我们就可以用到无条件跳转语句GOTO。如，我们做个加法器，让程序把我们用键盘输入的数据进行累加。这个程序如下：
10 INPUT "A=";A
20 X=X+A
30 PRINT "X=";X
40 GOTO 20
50 END
运行
A=1
X=1
A=2
X=3
A=5
X=8
A=6
X=14
A=5
X=19
A=[跳出]
?BREAK IN 10
    程序会一直运行下去，如果你此时要退出程序的话，可以按下跳出键。程序会显示"?BREAK IN 10"，说明在第几行中断了操作。这里的10表示行号。

第四节 数据区操作
    有时我们会遇到数据很多而又比较固定。这时如果用LET和INPUT都不是很方便，那就要用到数据区的操作了语句了。数据区中的数据要用DATA来放，放好了用READ来读。DATA虽然是一个语句，但它只是让计算机识别这里是数据区，它后面跟的就是数据，并且这些数据可以用READ语句读取的，其本身是不会运行的，程序运行到这里会自动跳过去的。下面就举个例子来说明一下吧：如果我们要求一个由10个电阻并串而得的电路的干路电阻值，程序如下：
10 READ R1,R2,R3,R4,R5,R6,R7,R8,R9,R10
20 R=1/R1+1/R2+1/R3+1/R4+1/R5+1/R6+1/R7+1/R8+1/R9+1/R10
30 PRINT R
40 DATA 13,22,34,14,5,26,37,18,39,10
50 END
运行
.669903105
    可以看出在这里使用READ和DATA要比使用LET或INPUT都要方便。但要注意的是，DATA中的数据的个数一定要与READ读取的次数相同式更多。否则如果READ将DATA中的数据读完了后再读的时候程序就会出错，OUT OF DATA IN XX。如果我们对某一组数据需要重复使用多次的话，我们可以用RESTORE来恢复数据区的指针到数据区头。如上面的程序中如果我们在程序中加入
32 RESTORE
33 GOTO 10
    这两行程序的话，这个程序就会永远地运行下去。但如果只加第33行而不加第32行，那程序运行第二次时就会出错。
      
 第三章 程序分支
    我们在生活中总会对一些事物进行一些判断。以从中选择。如。我们开汽车从成都到重庆，可以走成渝高速公路，也可以走318国道。而走成渝高速路的过路费要比走318国道贵。如果我们要想快速到达重庆，那就要走成渝高速路，但如果想不花那么我钱，就可以走318国道。那么，像这种现象在编一个程序时我们往往会遇到，当进行判断后就要分别进入两条或更多的路线当中进行运行。那这里就要用到程序的分支。本章就着重地讲程序的分支。
 
第一节 逻辑运算
    在中学时我们就学了逻辑运算，如果几个条件中只要有一个满足就行了，那这就叫逻辑加或称或。如果要使几个条件全部满足才行的话，这就叫逻辑乘或称与。如果某个条件满足就不行而条件不满足反而行那就叫做逻辑减或称非。我们可以用1表示行，用0表示不行，那么上面说的我们可以用以下的表表示
逻辑或
  1+1=1     1+0=1     0+1=1     0+0=0
逻辑与
  1*1=1     1*0=0     0*1=0     0*0=0
逻辑非
  1=0       0=1
    逻辑或在程序中一般用OR表示，也可以用一个括号把条件括起来后用加号(+)连接，逻辑与在程序中一般用AND表示，也可以用一个括号把条件括起来后用加号(*)连接，逻辑非在程序中一般用NOT(条件)表示。
    如：要同时满足A=1，B=2，C=3，我们可以用
A=1 AND B=2 AND C=3
    来表示；也可以用
(A=1)*(B=2)*(C=3)
    来表示。如果在A=1，B=2，C=3中有一个条件成立就满足的话，我们可以用
A=1 OR B=2 OR C=3
    来表示或用
(A=1)+(B=2)+(C=3)
    来表示。如果不能使A=1或者说当A≠1时条件才满足时，我们就用
NOT(A=1)
    来表示,当然也可以用
    (A<>1)
    来表示。
    在实际应用中，逻辑运算的的应用方法是非常灵活且范围是非常广的，我们一定要在实际编程中积累这些经验。

第二节 条件判断
    上一节我们已经讲到了逻辑运算的方法，我们就可能利用逻辑运算让计算机进行不同的处理。这里我们常常要用到条件判断语句给IF……THEN了。
    下面举个例，让计算机从一组数据中选出不能作分母的数据。分析：我们知道，只有当这个数为0时才不能作分母。也就是说看这个数据是否为0。如果用A表示这个数，那这个条件就可以用A=0就不能作分母。这个程序如下：
10 INPUT A
20 IF A=0 THEN 40
30 PRINT "能":GOTO 10
40 PRINT "不能":GOTO 10
50 END
运行
?1
能
?5
能
?0
不能
?
……
    如果要同时满足几个条件时，就要进行逻辑运算了。如，我们要求
   2
y=x +7x+12
    中的x取什么值时y的值会小于0。我们分析一下吧。我们知道，如果一个一元二次方程中B*B-4*A*C>0时，这个方程会有两个不同的根，而这两个根就是与X轴的交点。这个题中的B*B-4*A*C=7*7-4*1*12=49-48=1>0，有-3和-4两个不同的根，如果用X1表示小根，用X2表示大根，那么这个问题的关键就是判断这个取值是不是比X1大，同时比X2小，我们的逻辑表达式就可以写成：
Y>X2 AND Y<X1
    那这个程序可以这么写了：
10 X1=-4
20 X2=-3
40 INPUT X
50 IF X>X1 AND X<X2 THEN 70
60 PRINT "Y>=0":GOTO 40
70 PRINT "Y<0":GOTO 40
80 END
运行
?0
Y>=0
?-3
Y>=0
?-3.4
Y<0
?
……
    有些时候，在同一个条件中又要满足一些条件，这时我们要把各个小条件作用括号括起来作为一个在条件，再来进行逻辑运算。如：一个公司招聘一些职员，要求年龄在25岁至40岁之间，并且身高1米7以上，或者不满足上面两个条件但有相关工作经验5年以上的。我们来分析一下这里面的条件，年龄在25岁至40岁之间就是说年龄要>=25并且要年龄要<=40；身高要>=170厘米；相关工作经验>=5。分析完了，我们就可以写出逻辑运算表达式了。如果用NL表式年龄，用SG表示身高，用JY表示工作经验的话，那这个表达式是
((NL>=25 AND NL<=40) AND SG>=170) OR JY>=5
    这个程序可以这样编：
10 INPUT "年龄";NL
20 INPUT "身高";SG
30 INPUT "经验";JY
40 IF ((NL>=25 AND NL<=40) AND SG>=170) OR JY>=5 THEN 60
50 REM 分支一
55 PRINT "不合格":GOTO 10
60 REM 分支二
65 PRINT "合格":GOTO 10
70 END
运行
年龄41
身高164
经验12
满足
年龄26
身高175
经验3
合格
年龄26
身高169
经验2
不合格
年龄
……
    在程序中我们看到了REM这个语句，这是注释语句，REM是一个非执行语句。它不会让计算机执行任何命令。它只是放在程序中方便我们阅读源程序。
    IF……THEN语句除了上面的那种
IF 条件表达式 THEN 行号
    外，还有
IF 条件表达式 THEN 结果表达式
    和
IF 条件表达式 THEN 一种结果表达式 ELSE 另一种结果表达式
    两种。在这两种当中，结果表达式可以是一个算术表达式，或者是一个语句等，当然也可以是行号。如上面的程序可以写成：
10 INPUT "年龄";NL
20 INPUT "身高";SG
30 INPUT "经验";JY
40 IF ((NL>=25 AND NL<=40) AND SG>=170) OR JY>=5 THEN PRINT "合格":10 ELSE PRINT "合格":10
50 END

第三节 控制转移
    有些时候，我们需要计算机按照计算结果自动进入各个分支程序，如果用IF……THEN就显得麻烦。如，我们让编一个程序来解一元二次方程，要求计算机根据Δ的值是否大于0来决定该执行哪种操作。我们知道：
Δ>0有两个不同的实数根
Δ=0有两个相同的实数根
Δ<0没有实数根
    如果用IF……THEN的话，计算机会先进行逻辑运算，得出结果后再进行判断。比较麻烦。如果能在进行逻辑运算后自动进入相应的子程序而不用判断就好了，那就要用到控制转移语句ON……GOTO了。根据ON后面的数据的大小会相应地进入GOTO后的行里。其中ON后的数据值应该是1，2，3，4，5……它对应了GOTO后的第1，2，3，4，5……个行号。如果没有对应的行号就接着下一行运行，如
10 INPUT A
20 ON A GOTO 30，40，50，60
25 GOTO 70
30 分支一
40 分支二
50 分支三
60 分支四
70 END
    在这个程序中，相当于
10 INPUT A
20 IF A=1 THEN 30
21 IF A=2 THEN 40
22 IF A=3 THEN 50
23 IF A=4 THEN 60
25 GOTO 70
30 分支一
40 分支二
50 分支三
60 分支四
70 END
    ON后面可以变量，也可以是表达式。如上面解一元二次方程的例子，源程序可以这样编：
10 INPUT "A=";A
20 INPUT "B=";B
30 INPUT "C=";C
40 D=B*B-4*A*C
50 ON (D<0)+(D=0)*2+(D>0)*3 GOTO 60,100,130
60 X1=(-B+SQR(D))/(A*2)
70 X2=(-B-SQR(D))/(A*2)
80 PRINT "X1=";X1,"X2=";X2
90 GOTO 140
100 X1=-1*B/(A*2)
110 PRINT "X1=X2=";X1
120 GOTO 140
130 PRINT "无实数根!"
140 END
运行
A=1
B=7
C=12
X1=-3
X2=-4
运行
A=1
B=4
C=4
X1=X2=-2
运行
A=1
B=4
C=5
无实数根!

第四节 子程序
    如果在同一个程序中，我们会反复地在不同的地方运行同一段程序。那我们不可以写太多个相同的程序。因此，我们可以把这段程序作成子程序，然后再用子程序调用语句GOSUB来调用。在子程序的末尾再用一个返回语句RETURN返回刚才调用子程序的地方。如：
10 REM 主程序
20 PRINT "我是";
30 GOSUB 110
40 PRINT "你也是";
50 GOSUB 110
60 PRINT "他是";
70 GOSUB 140
80 PRINT "我们的老师也是";
90 GOSUB 140
100 END
110 REM 子程序一
120 PRINT "中国人"
130 RETURN
140 REM 子程序二
150 PRINT "美国人"
160 RETURN
运行
我是中国人
你也是中国人
他是美国人
我们的老师出是美国人
    子程序的调用规则是：
    ①调用子程序时，必须在调用的地方写上调用语句GOSUB和子程序的开始行号。
    ②在子程序中至少要有一个返回语句RETURN，这样才能停止运行子程序而返回被调用处接着运行。
    ③在子程序返回后会自动回到调用子程序的下一个语句接着运行。
    ④子程序中还可以调用其它的子程序，也就是子程序可以互相嵌套，只要有足够的内存，子程序可以无休止的嵌套。当然，嵌套多了会内存溢出的。
    ⑤子程序本身不能被子程序自已调用，否则会退不出这个子程序而造成内存溢出。
    在我们编程序时，子程序会经常用到。如，编一个程序，我们要它实现很多功能，我们可以做一个主程序，各个功能都作成子程序，用主程序来调用。这样，我们运行主程序时不会受到子程序的影响。如果想到新的功能，要添加也是非常方便的，所以请各位星迷们都要认真理解子程序的调用规则。

第四章 循环
    在编程序时，我们往往会遇到同一类型的事要做若干遍。这时我们就会用到循环。
 
第一节 计数循环
    如，我们要计算机计算1+2+3+4+……+99+100。如果用第二章学的赋值语句那就太麻烦了。我们这时可以用到计数语句FOR……NEXT了。FOR……NEXT的格式是：
10 FOR X=A TO B STEP C
20 循环体
30 NEXT X
    这中间的X是循环计数变量，A是循环的起始数，表示X从A开始循环；B是循环的终止数，表示X的循环不大于B；C是步长（如果STEP C省略不写那程序会默认为STEP 1），表示每次循环要增加的数值；循环体是要在循环中执行的语句，NEXT X是返回FOR X=A TO B STEP C这一句并将X的值加上一个步长后继续运行循环体的语句。直到循环计数变量X的值大于循环终止数B后，程序才会接NEXT X这一句的下一个语句继续运行。其中，NEXT X可以省略变量名X直接写成NEXT。如上例的程序为：
10 A=0:FOR I=1 TO 100
20 A=A+I
30 NEXT I
40 PRINT A
50 END
运行
5050
    又如：我们要计算从2到1000当中所有偶数的总和，我们知道，从2到1000，第隔两个就是偶数，因此，我们可以把步长定为2，我们就可以从2加到1000
10 A=0:FOR I=2 TO 1000 STEP 2
20 A=A+I
30 NEXT
40 PRINT A
50 END
运行
250500
    步长也可以为负数，如上面的例子，我们可以从1000加到2，程序是：
10 A=0:FOR I=1000 TO 2 STEP -2
20 A=A+I
30 NEXT
40 PRINT A
50 END
运行
250500
    可以看出，两种方法是一样的。那么我们现在分析一下循环语句的执行过程吧。我们以
10 FOR I=A TO B STEP C
20 A=A+1
30 NEXT
    为例：
    ①在执行循环语句时，FOR会把初值A赋给变量I，并把终值与步长记录下来。
    ②运行循环体A=A+1；在运行循环体的全过程中，这个变量I始终保持着一个值。
    ③执行到NEXT语句时，程序会跳FOR语句处，把I的值与终值B的值进行一次比较，如果I<=B则将变量I的值增加一个步长C后继续运行循环体，如果I>B则跳到NEXT的下一个语句继续运行。
    ④循环可以不要循环体，空循环可以起到延时作用。
    有时候，我们用一个循环还不能完成一个任务，如打印乘法九九表。这时我们就要用到双重循环，如上面的程序是：
10 FOR I=1 TO 9
20 FOR J=1 TO I
30 PRINT J;"*";I;"=";I*J
40 NEXT
50 NEXT
60 END
运行
1*1=1
1*2=2
2*2=4
1*3=3
2*3=6
3*3=9
……
5*9=45
6*9=54
7*9=63
8*9=72
9*9=81
   循环可以是两重，也可以是三重，四重或更多重，如我们做了三重循环来模拟时间的时、分、秒。我们来看一个例子：
10 FOR I=0 TO 23
20 FOR J=0 TO 59
30 FOR K=0 TO 59
40 CLS:PRINT I;":";J":";K
50 NEXT
60 NEXT
70 NEXT
80 END
运行
0:0:0
0:0:1
0:0:2
0:0:3
0:0:4
……
23:59:57
23:59:58
23:59:59
    在编程序时，要根据际情况来确定要使用几重循环。

第三节 条件循环
    上一节我们已经讲了计数循环的方法。那有时候我们并不知道要循环多少次时就不能用FOR……NEXT了。这时我们就要用到条件循环WHILE……WEND了。条件循环与计数循环不同的是，条件循环在每次循环之前要进行一次判断。根据判断结果来决定是否执行循环。如，我们计算A=1+2+3+4+……如果A，10000就继续这样加下去。看最后的答案是多少。
10 A=0
20 WHILE A<10000
20 I=I+1:A=A+I
30 WEND
40 PRINT A
50 END
运行
10011
    条件循环的格式为
10 WHILE 条件
20 循环体
30 WEND
我们以上面的例子来分析一下条件循环的执行过程吧。
    ①当运行到WHILE时，程序会对WHILE后面的表达式进行逻辑运算，当结果为1时则运行循环体。当结果为0时则跳到WEND的下一个语句继续运行。
    ②运行循环体时，一般会有与WHILE后面条件有关的变量参加运算。
    ③循环会在WEND处返回WHILE处继续对WHILE后的表达式进行逻辑运算。

第五章 函数
 
第一节 标准函数
    1.平方根函数。利用平方根函数SQR(X)可以让计算机算出X的算术平方根的值，如：
10 A=2
20 P=SQR(A)
30 PRINT P
40 END
运行
1.41421356
    括号中的X可以是一个数，如SQR(2)，也可以是一个变量，如上例中第20行，还可以是一个算术表达式。如
10 READ A,B,C
20 P=SQR(A*B+SQR(B+C))
30 PRINT P
40 DATA 5,1,3
50 END
运行
2.64575131
    但要注意：X的值不能为负。
    2.指数函数。指数函数EXP(X)可以让计算机计算常数"e"的X次方的值(e=2.71828…)。X可以是常数值，变量或表达式。如：我们要计算e的7次方
10 A=EXP(7)
20 PRINT A
30 END 
运行
1096.63316
    3.对数函数。对数函数LOG(X)可以让计算机计算以e为底的自然对数。如：
10 A=14
20 B=LOG(A)
30 PRINT B
40 END
运行
2.63905733
    如果我们要计算以10为底X的对数的话就要用
LOG10(X)=LOGe(X)/LOGe(10)
    来转换。如，我们要求以10为底500的对数，可用以下程序：
10 A=LOG(500)/LOG(10)
20 PRINT A
30 END
运行
2.69897
    4.绝对值函数。和数学式│X│一样，绝对值函数ABS(X)是求X的绝对值的，当X>0时返回X，当X=0时返回0，当X<0时返回-X。如：
10 A=5:B=0:C=-4
20 A=ABS(A):B=ABS(B):C=ABS(C)
30 PRINT A,B,C
40 END
运行
5
0
4
    5.取符号函数。取值符号SGN(X)是返回X的数学符号。当X>0时，返回1；当X=0时返回0，当X<0时，返回-1。如：
10 A=SGN(58):B=SGN(0):C=SGN(-16)
20 PRINT A,B,C
30 END
运行
1
0
-1
 
